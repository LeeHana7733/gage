<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="history">
	<insert id="reg_history">
		<!-- 지출내역 -->
		CREATE TABLE AC_HISTORY
		(
			 OID VARCHAR2(255),
			 SPD_DATE DATE, 
			 SPD_AMOUNT NUMBER(20),
			 SPD_HISTORY VARCHAR2(255),
			 SPD_MEMO    VARCHAR2(255),
			 SPD_CATEGORY VARCHAR2(255),
			 SPD_PAYMENT  VARCHAR2(255),
			 SPD_UPDATE_DATE DATE,
			 SPD_CREATE_DATE DATE
		)
		<!-- 시퀀스 -->
		CREATE SEQUENCE  AC_HISTORY_SEQ
        INCREMENT BY 1
        START WITH 1 
        MAXVALUE 1000000
        NOCACHE
	</insert>
	
	<update id="mergeHistory"  parameterType="hist">
		<!-- history테이블 데이터 수정 / 저장-->
		MERGE INTO AC_HISTORY 
		USING DUAL
		ON	 (OID=#{oid})
		WHEN MATCHED THEN
			UPDATE SET
				SPD_DATE		= to_date(#{spdDate},'yyyy-mm-dd') ,
				SPD_AMOUNT	= ${spdAmount},	 
				SPD_HISTORY	= #{spdHistory}, 
				SPD_MEMO		= #{spdMemo},  
				SPD_CATEGORY	= #{spdCategory},  
				SPD_PAYMENT	= #{spdPayment},
				SPD_UPDATE_DATE = SYSDATE
			WHERE
				OID	= #{oid} 
		WHEN NOT MATCHED THEN
			 INSERT
			(	OID, 
				SPD_DATE, 
				SPD_AMOUNT, 
				SPD_HISTORY, 
				SPD_MEMO, 
				SPD_CATEGORY, 
				SPD_PAYMENT, 
				SPD_UPDATE_DATE, 
				SPD_CREATE_DATE,
				SPD_TYPE
			)
			VALUES
			(
				AC_HISTORY_SEQ.NEXTVAL,
				to_date(#{spdDate},'yyyy-mm-dd'),
				${spdAmount},
				#{spdHistory}, 
				#{spdMemo}, 
				#{spdCategory}, 
				#{spdPayment}, 
				SYSDATE, 
				SYSDATE,
				nvl(#{spdType},'OUT')
			)
	</update>
	
	<delete id="historyDelete" parameterType="string">
		<!-- history테이블 데이터 삭제-->
		DELETE FROM AC_HISTORY
		WHERE OID = #{oid}
	</delete>
	<select id="historyInfo" parameterType="hashmap" resultType="hist">
		<!-- history테이블 데이터 상세 정보-->
		SELECT 	OID, 
					TO_CHAR(SPD_UPDATE_dATE , 'hh24:mi:ss')	SPD_TIME ,
					TO_CHAR(SPD_DATE, 'yyyy-mm-dd') 	SPD_DATE ,
					SPD_AMOUNT, 
					SPD_HISTORY, 
					SPD_MEMO, 
					SPD_CATEGORY, 
					SPD_PAYMENT
		FROM		AC_HISTORY	
		WHERE  	1=1
		<choose>
			<when test="type eq 'pop'" >
				AND	OID	 = 	#{value}
			</when>
			<when test="type eq 'date'" >
				AND	SPD_DATE	 = 	TO_DATE(#{value} , 'YYYY-MM-DD') 
			</when>
		</choose>
		<if test="paymentType != '0'.toString()">
				AND	SPD_PAYMENT	=	#{paymentType} 
		</if>
		<if test="cateType != '0'.toString()">
				AND	SPD_CATEGORY	=	#{cateType} 
		</if>
		<choose>
			<when test="spdType eq 'IN'">
				AND SPD_TYPE = #{spdType}
			</when>
			<otherwise>
				AND SPD_TYPE = 'OUT'
			</otherwise>
		</choose>
		ORDER BY	SPD_TIME		
	</select>
	
	<select id="historyList" parameterType="hist" resultType="hashmap">
		<![CDATA[
		SELECT	TO_CHAR(A.TOTAL_DT , 'yyyy-mm-dd') AS SPD_DATE,
					NVL( SUM(B.SPD_AMOUNT) , '0') SPD_AMOUNT
		FROM     (	SELECT	TRUNC (START_DT + LEVEL, 'DD')-1 TOTAL_DT
	         			FROM     (	SELECT 	TRUNC( TO_DATE(#{spdDate},'yyyy-mm-dd'), 'MM') START_DT
	              						FROM		DUAL)
	             		CONNECT BY LEVEL <= TO_CHAR(LAST_DAY(START_DT), 'DD')
	             	) A ,
	           		AC_HISTORY  B
		WHERE	TO_CHAR(A.TOTAL_DT ,'YYYYMMDD') = TO_CHAR(B.SPD_DATE(+) , 'YYYYMMDD')
		]]>
		<if test="paymentType != '0'.toString()">
			AND	B.SPD_PAYMENT(+)	= #{paymentType}
		</if>
		<if test="cateType != '0'.toString()">
			AND	B.SPD_CATEGORY(+)=	#{cateType} 
		</if>
		AND	B.SPD_TYPE(+) = 'OUT'
		GROUP BY TOTAL_DT
		ORDER BY TOTAL_DT DESC
	</select>
	
	<select id="historyInList" parameterType="hist" resultType="hashmap">
		<![CDATA[
		SELECT	TO_CHAR(SPD_DATE , 'yyyy-mm-dd') SPD_DATE,
					SPD_AMOUNT,
					SPD_MEMO,
					SPD_HISTORY,
					OID
		FROM		AC_HISTORY
		WHERE 	1=1
		]]>	
		AND	TRUNC(SPD_DATE,'MM')	=	TRUNC(TO_DATE(#{spdDate} , 'yyyy-mm-dd'),'MM')
		AND	SPD_TYPE = 'IN'
		ORDER BY SPD_DATE	DESC
	</select>
	
	<select id="dateInfoAmount" parameterType="hist" resultType="hashMap">
		SELECT	* 
		FROM		(	SELECT 	NVL	(SUM	(	CASE 	WHEN TO_CHAR(SPD_DATE , 'MONTH')	=	TO_CHAR(TO_DATE(#{spdDate})	,	'MONTH')
		                								THEN  SPD_AMOUNT 
		                								ELSE 	0
		                						END	) , 0 )	AS  monthTotal,
	        						NVL	(SUM	(	CASE	WHEN SPD_DATE 	=	TO_DATE(#{spdDate} , 'yy-mm-dd')
	                									THEN  SPD_AMOUNT
	                									ELSE	0 
	                							END	), 0 )	AS dateTotal,
	                				TO_char (fullDate , 'yyyy-mm-dd') as fullDate,
	                				lastDate,
	                				to_char ( todate , 'yyyy-mm-dd') as toDate
	                		FROM		(	SELECT	SPD_DATE ,
		                								SPD_AMOUNT
		                					FROM		AC_HISTORY
		                					<where>
		                						<choose>
													<when test="spdType eq 'IN'">
														AND SPD_TYPE = #{spdType}
													</when>
													<otherwise>
														AND SPD_TYPE = 'OUT'
													</otherwise>
												</choose>
											</where>
											<if test="paymentType != '0'.toString()">
												AND	B.SPD_PAYMENT		= #{paymentType}
											</if>
											<if test="cateType != '0'.toString()">
												AND	B.SPD_CATEGORY	=	#{cateType} 
											</if>
		                					
		                				)
			 	 ,	(	SELECT 	TRUNC(TO_DATE(#{spdDate}), 'MM') AS fullDate,
								 	TO_CHAR(LAST_DAY(#{spdDate}), 'DD') AS lastDate,
								 	TO_DATE(#{spdDate}, 'YY-MM-DD') AS toDate
						FROM DUAL))
	</select>
</mapper>