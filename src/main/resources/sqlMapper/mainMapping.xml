<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="history">
	<insert id="reg_history">
		<!-- 지출내역 -->
		CREATE TABLE AC_HISTORY
		(
			 OID VARCHAR2(255),
			 SPD_DATE DATE,
			 SPD_AMOUNT NUMBER(20),
			 SPD_HISTORY VARCHAR2(255),
			 SPD_MEMO    VARCHAR2(255),
			 SPD_CATEGORY VARCHAR2(255),
			 SPD_PAYMENT  VARCHAR2(255),
			 SPD_UPDATE_DATE DATE,
			 SPD_CREATE_DATE DATE
		)
		<!-- 시퀀스 -->
		CREATE SEQUENCE  AC_HISTORY_SEQ
        INCREMENT BY 1
        START WITH 1 
        MAXVALUE 1000000
        NOCACHE
	</insert>
	
	<update id="mergeHistory"  parameterType="history">
		MERGE INTO AC_HISTORY 
		USING DUAL
		ON	 (OID=#{oid})
		WHEN MATCHED THEN
			UPDATE SET
				SPD_DATE		= to_date(#{spdDate},'yyyy-mm-dd') ,
				SPD_AMOUNT	= ${spdAmount},	 
				SPD_HISTORY	= #{spdHistory}, 
				SPD_MEMO		= #{spdMemo},  
				SPD_CATEGORY	= #{spdCategory},  
				SPD_PAYMENT	= #{spdPayment},
				SPD_UPDATE_DATE = SYSDATE
			WHERE
				OID	= #{oid} 
		WHEN NOT MATCHED THEN
			 INSERT
			(	OID, 
				SPD_DATE, 
				SPD_AMOUNT, 
				SPD_HISTORY, 
				SPD_MEMO, 
				SPD_CATEGORY, 
				SPD_PAYMENT, 
				SPD_UPDATE_DATE, 
				SPD_CREATE_DATE
			)
			VALUES
			(
				AC_HISTORY_SEQ.NEXTVAL,
				to_date(#{spdDate},'yyyy-mm-dd'),
				${spdAmount},
				#{spdHistory}, 
				#{spdMemo}, 
				#{spdCategory}, 
				#{spdPayment}, 
				SYSDATE, 
				SYSDATE
			)
	
		
	</update>
	
	<delete id="historyDelete" parameterType="string">
		DELETE FROM AC_HISTORY
		WHERE OID = #{oid}
	</delete>
	<select id="historyList" parameterType="string" resultType="hashmap">
		<![CDATA[
		SELECT	TO_CHAR(A.TOTAL_DT , 'yyyy-mm-dd') AS SPD_DATE,
					NVL( SUM(B.SPD_AMOUNT) , '0') SPD_AMOUNT
		FROM     (	SELECT	TRUNC (START_DT + LEVEL, 'DD')-1 TOTAL_DT
	         			FROM     (	SELECT 	TRUNC( TO_DATE(#{date},'yyyy-mm-dd'), 'MM') START_DT
	              						FROM		DUAL)
	             		CONNECT BY LEVEL <= TO_CHAR(LAST_DAY(START_DT), 'DD')
	             	) A ,
	           		AC_HISTORY  B
		WHERE	TO_CHAR(A.TOTAL_DT ,'YYYYMMDD') = TO_CHAR(B.SPD_DATE(+) , 'YYYYMMDD')
		GROUP BY TOTAL_DT
		ORDER BY TOTAL_DT DESC
		]]>
	</select>
	
	<select id="historyInfo" parameterType="hashmap" resultType="history">
		SELECT 	OID, 
					TO_CHAR(SPD_UPDATE_dATE , 'hh24:mi:ss')	SPD_TIME ,
					TO_CHAR(SPD_DATE, 'yyyy-mm-dd') 	SPD_DATE ,
					SPD_AMOUNT, 
					SPD_HISTORY, 
					SPD_MEMO, 
					SPD_CATEGORY, 
					SPD_PAYMENT
		FROM		AC_HISTORY	
		WHERE  	1=1
		<choose>
			<when test="type eq 'pop'" >
				AND	OID	 = 	#{value}
			</when>
			<when test="type eq 'date'" >
				AND	SPD_DATE	 = 	TO_DATE(#{value} , 'YYYY-MM-DD') 
			</when>
		</choose>
		ORDER BY	SPD_TIME		
	</select>
	
	<select id="totalAmount" parameterType="hashmap" resultType="string">
		SELECT	SUM(SPD_AMOUNT) AS AA
		FROM		AC_HISTORY
		WHERE	1=1
		<choose>
			<when test="type eq 'D'.toString()">
				AND	SPD_DATE	=	TO_DATE(#{date} , 'yyyy-mm-dd')
			</when>
			<when test="type eq 'M'.toString()">
				AND 	TO_CHAR(SPD_DATE , 'MONTH') 	=	TO_CHAR(TO_DATE(#{date}), 'MONTH')
			</when>
		</choose>
	</select>
</mapper>